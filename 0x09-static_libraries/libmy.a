!<arch>
0-isupper.c/    0           0     0     644     348       `
#include "main.h"

/**
 * _isupper - A function that checks for uppercase character.
 * @c: An input character
 * Return: 1 if c is uppercase or 0 otherwise
 */
int _isupper(int c)
{
	char uppercase = 'A';
	int isupper = 0;

	for (; uppercase <= 'Z'; uppercase++)
	{
		if (c == uppercase)
		{
			isupper = 1;
			break;
		}
	}

	return (isupper);
}
0-memset.c/     0           0     0     644     256       `
#include "main.h"

/**
* _memset - Entry point
* @s: pointed destination
* @b: constant byte
* @n: bytes
* Return: Always 0 (Success)
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;
	return (s);
}
0-strcat.c/     0           0     0     644     399       `
#include "main.h"

/**
* _strcat - concatenates two strings,
* @dest: destination.
* @src: source.
* Return: the pointer to dest.
*/

char *_strcat(char *dest, char *src)
{
	int count = 0, count2 = 0;

	while (*(dest + count) != '\0')
	{
		count++;
	}

	while (count2 >= 0)
	{
		*(dest + count) = *(src + count2);
		if (*(src + count2) == '\0')
			break;
		count++;
		count2++;
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     433       `
#include "main.h"

/**
* _atoi - Convert a string to an integer.
* @s: The pointer to convert
*
* Return: A integer
*/
int _atoi(char *s)
{
	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
		if (s[c] == 45)
		{
			min *= -1;
		}

		while (s[c] >= 48 && s[c] <= 57)
		{
			isi = 1;
			ni = (ni * 10) + (s[c] - '0');
			c++;
		}

		if (isi == 1)
		{
			break;
		}

		c++;
	}

	ni *= min;
	return (ni);
}

1-isdigit.c/    0           0     0     644     186       `
#include "main.h"

/**
 * _isdigit - prints the code
 * @c: int to be checked
 * Return: successful digit is 1 is 0 otherwise
 */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}
1-memcpy.c/     0           0     0     644     263       `
#include "main.h"

/**
 * _memcpy - Entry point
 * @dest: input
 * @src: input
 * @n: input
 * Return: Always 0 (Success)
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];

	return (dest);
}

1-strncat.c/    0           0     0     644     353       `
#include "main.h"

/**
* _strncat - concatenates two strings
* @dest:char dest
* @src: char src
* @n:length int
* Return:char
*/
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	for (i = 0; dest[i] != '\0'; i++)
	{
		continue;
	}
	for (j = 0; src[j] != '\0' && j < n; j++)
	{
		dest[i + j] = src[j];
	}
	dest[i + j] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     262       `
#include <stdio.h>
#include "main.h"

/**
 * _strchr - Entry point
 * @s: input
 * @c: input
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (s + i);
	}

	return (NULL);
}
2-strlen.c/     0           0     0     644     268       `
#include "main.h"

/**
* _strlen - a function that returns the length of a string
* @s: char input
* Return: length of the input string
*/
int _strlen(char *s)
{
	int i = 1, sum = 0;
	char pl = s[0];

	while (pl != '\0')
	{
		sum++;
		pl = s[i++];
	}
	return (sum);
}
2-strncpy.c/    0           0     0     644     298       `
#include "main.h"
/**
* _strncpy - copie a string
* @dest:char
*  @src:char
* @n:int
* Return:char
*/
char *_strncpy(char *dest, char *src, int n)
{
int i;

i = 0;
	while (i < n && *(src + i))
	{
	*(dest + i) = *(src + i);
	i++;
	}
	while (i < n)
	{
	*(dest + i) = '\0';
	i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     207       `
#include "main.h"

/**
* _islower -> checks for lowercase character
* @c: a character argument
* Return: returns 0 and 1 depending on the condition
*/

int _islower(int c)
{
return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     218       `
#include "main.h"

/**
* _puts - a function that prints a string
* @str: string input
* Return: string
*/
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     283       `
#include "main.h"

/**
* _strcmp - compare 2 string
* @s1:string
* @s2:strmp
* Return:int
*/

int _strcmp(char *s1, char *s2)
{
	while (((*s1 != '\0') && (*s2 != '\0')) && (*s1 == *s2))
	{
		s1++;
		s2++;
	}

	if (*s1 == *s2)
	{
		return (0);
	}

	else
	{
		return (*s1 - *s2);
	}
}

3-strspn.c/     0           0     0     644     427       `
#include "main.h"

/**
 * _strspn - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, n, value, check;

	value = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		check = 0;

		for (n = 0; accept[n] != '\0'; n++)
		{
			if (accept[n] == s[i])
			{
				value++;
				check = 1;
			}
		}

		if (check == 0)
			return (value);
	}

	return (value);
}

4-isalpha.c/    0           0     0     644     234       `
#include "main.h"

/**
* _isalpha - check for alphavetical letters
* @c: a character to be checked on
* Return: returns 0 or 1 depend on condition
*/

int _isalpha(int c)
{
return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
4-strpbrk.c/    0           0     0     644     334       `
#include <stdio.h>
#include "main.h"

/**
 * _strpbrk - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
	int i, n;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (n = 0; accept[n] != '\0'; n++)
		{
			if (s[i] == accept[n])
				return (s + i);
		}
	}

	return (NULL);
}
5-strstr.c/     0           0     0     644     406       `
#include <stdio.h>
#include "main.h"

/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *one = haystack;
		char *two = needle;

		while (*one == *two && *two != '\0')
		{
			one++;
			two++;
		}

		if (*two == '\0')
			return (haystack);
	}

	return (NULL);
}
6-abs.c/        0           0     0     644     175       `
#include "main.h"

/**
* _abs -> return absolute value of a number
* @n: parameter
* Return: absolute value of a number
*/

int _abs(int n)
{
if (n < 0)
n = -n;
return (n);
}

9-strcpy.c/     0           0     0     644     279       `
#include "main.h"

/**
* _strcpy - Copy a string
* @dest: Destination value
* @src: Source value
*
* Return: the pointer to dest
*/
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	dest[i++] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     0         `
